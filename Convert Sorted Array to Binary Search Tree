Given an integer array nums where the elements are sorted in ascending order, convert it to a 
height-balanced
 binary search tree.

 

Example 1:


Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:


Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode SortedArrayToBST(int[] nums) {
        if (nums.Length == 1) {
            TreeNode oneNode = new TreeNode(nums[0], null, null);
            return oneNode;
        }

        return CreateBST(nums, 0, nums.Length - 1);
    }

    public TreeNode CreateBST(int[] sortedArray, int startIndex, int endIndex) {
        if (startIndex > endIndex) {
            return null;
        }

        int middleIndex = startIndex + (endIndex - startIndex) / 2;
        TreeNode middleNode = new TreeNode(sortedArray[middleIndex], null, null);

        middleNode.left = CreateBST(sortedArray, startIndex, middleIndex - 1);
        middleNode.right = CreateBST(sortedArray, middleIndex + 1, endIndex);
        return middleNode;
    }
}
