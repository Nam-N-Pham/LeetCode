Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30

public class Solution {
    public IList<IList<int>> Generate(int numRows) {
        IList<IList<int>> listOfRows = new List<IList<int>>();
        IList<int> row1 = new List<int>() { 1 };
        listOfRows.Add(row1);
        if (numRows == 1) {
            return listOfRows;
        }

        IList<int> row2 = new List<int>() {1, 1};
        listOfRows.Add(row2);
        if (numRows == 2) {
            return listOfRows;
        }

        int currentRow = 3;
        while (currentRow <= numRows) {
            listOfRows.Add( CreateRow(currentRow, listOfRows) );
            currentRow++;
        }

        return listOfRows;
    }

    public IList<int> CreateRow(int inputRow, IList<IList<int>> inputListOfRows) {
        int[] row = new int[inputRow];
        row[0] = 1;
        row[row.Length - 1] = 1;
        for (int i = 1; i < row.Length - 1; i++) {
            row[i] = inputListOfRows[inputListOfRows.Count - 1][i - 1] + inputListOfRows[inputListOfRows.Count - 1][i];
        }
        return row;
    }
}
