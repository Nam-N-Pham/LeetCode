Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

Use a stack to keep track of the parentheses. Push open parentheses to the stack and pop an open parenthesis when a closed parenthesis appears.
public class Solution {
    public bool IsValid(string s) {
        Dictionary<char, char> correspondingParen = new Dictionary<char, char>() {
            {'(', ')'},
            {'{', '}'},
            {'[', ']'}
        };
        List<char> parentheses = new List<char>();

        for (int i = 0; i < s.Length; i++) {
            if (s[i] == '(' || s[i] == '{' || s[i] == '[' ) {
                parentheses.Add(s[i]);
            }
            else if (parentheses.Count == 0) {
                return false;
            }
            else {
                if (s[i] == correspondingParen[parentheses[parentheses.Count - 1]]) {
                    parentheses.RemoveAt(parentheses.Count - 1);
                }
                else {
                    return false;
                }
            }
        }

        if (parentheses.Count == 0) {
            return true;
        }
        else {
            return false;
        }
    }
}

Code passed the submission. Had a lot of trouble when the stack has no items and a closed parenthesis appeared.
