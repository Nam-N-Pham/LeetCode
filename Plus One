You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
 

Constraints:

1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0's.

Add one to the last digit and see if there is a carry. If there is a carry, add the carry to the next digit. Repeat until you get to the end. If there is a carry
at the end, then create an array with an extra space for the carry.

public class Solution {
    public int[] PlusOne(int[] digits) {
        int sum = digits[digits.Length - 1] + 1;
        int carry = sum / 10;
        digits[digits.Length - 1] = sum % 10;

        for (int i = digits.Length - 2; i >= 0 && carry == 1; i--) {
            sum = digits[i] + carry;
            carry = sum / 10;
            digits[i] = sum % 10;
        }

        if (carry == 0) {
            return digits;
        } else {
            int[] extraDigitAnswer = new int[digits.Length + 1];
            extraDigitAnswer[0] = 1;
            for (int i = 1; i < extraDigitAnswer.Length; i++) {
                extraDigitAnswer[i] = digits[i - 1];
            }
            return extraDigitAnswer;
        }
    }
}
