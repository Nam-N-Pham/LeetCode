Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

You must not use any built-in exponent function or operator.

For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.
 

Example 1:

Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.
Example 2:

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.
 

Constraints:

0 <= x <= 231 - 1

Square numbers starting from 0 until you get a product greater than the input. Return that number minus 1. Use ulong to prevent overflow when you square a number.
Convert to int when you return the answer.
public class Solution {
    public int MySqrt(int x) {
        ulong answer = 0;
        ulong convertedX = Convert.ToUInt64(x);
        while(answer * answer <= convertedX) {
            answer++;
        }
        return Convert.ToInt32(--answer);
    }
}

Another approach is to check num <= x / num to prevent overflow.
public class Solution {
    public int MySqrt(int x) {
        if (x == 0) {
            return x;
        }

        int answer = 1;
        while (answer <= x / answer) {
            answer++;
        }

        return --answer;
    }
}

A more data structure approach is to use binary search. Still use num <= x / num to check squares to prevent overflow. Use (num + 1) > x / (num + 1) as well to check
for the answer.
public class Solution {
    public int MySqrt(int x) {
        if (x == 0) {
            return 0;
        }

        int start = 1;
        int end = x;
        int mid = start + (end - start) / 2;

        while (start < end) {
            if (mid <= x / mid && (mid + 1) > x / (mid + 1) ) {
                return mid;
            } else if (mid < x / mid) {
                start = mid + 1;
            } else {
                end = mid;
            }
        }
        return start;
    }
}
Solution is timing out, need to find out why.
