You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

You need to draw out the problem and see that the problem has recursive elements to it. Find the recursion n = n2 + n1, where n2 = n - 2 and n1 = n - 1.
The brute force method would fail the submission because it takes too much time.
The recursive approach has calls that appear multiple times, so it would be a good idea to save results. Dynamic programming can be used to improve the solution.
A top to bottom approach with memoization works. Another more optimized bottom to top approach works as well.

Brute force that fails, but gives insight to optimization:
public class Solution {
    public int ClimbStairs(int n) {
        if (n == 1) {
            return 1;
        }
        if (n == 2) {
            return 2;
        }

        return ClimbStairs(n - 1) + ClimbStairs(n - 2);
    }
}

Memoization method:
public class Solution {
    public int ClimbStairs(int n) {
        Dictionary<int, int> memo = new Dictionary<int, int>() {
            {1, 1},
            {2, 2}
        };

        int calculateStairs(int n) {
            if (memo.ContainsKey(n)) {
                return memo[n];
            } else {
                memo.Add(n, calculateStairs(n - 1) + calculateStairs(n - 2));
                return memo[n];
            }
        }

        return calculateStairs(n);
    }
}
