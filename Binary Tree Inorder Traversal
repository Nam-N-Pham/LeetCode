Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<int> InorderTraversal(TreeNode root) {
        List<int> answer = new List<int>();

        if (root == null) {
            return answer;
        }

        void RecursiveTraversal(TreeNode parent, List<int> list) {
            if (parent == null) {
                return;
            }
            // if (parent.left == null && parent.right == null) {
            //     list.Add(parent.val);
            //     return;
            // }

            RecursiveTraversal(parent.left, list);
            list.Add(parent.val);
            RecursiveTraversal(parent.right, list);
            return;
        }
        RecursiveTraversal(root, answer);

        return answer;
    }
}
