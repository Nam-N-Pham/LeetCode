Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?

The initial brute force method is to go through the array adding two numbers together then checking if they are equal to the target.

public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        int[] answer = new int[2];
        int sum = 0;

        for (int i = 0; i < nums.Length - 1; i++) {
            for (int j = i + 1; j < nums.Length; j++) {
                if (nums[i] + nums[j] == target) {
                    answer[0] = i;
                    answer[1] = j;
                }
            }
        }

        return answer;
    }
}

The code passes the submission.
Another approach to the problem is to use a HashMap. The key would be the value of a number in the array and the value would be the index of that number.
You would constantly check if an array value you are looking at has a corresponding key that sums up to the target.
mapKey = target - current

public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        int[] answer = new int[2];
        Dictionary<int, int> KeyNumberValueIndex = new Dictionary<int, int>();
        int sum = 0;

        for (int i = 0; i < nums.Length; i++) {
            if (KeyNumberValueIndex.ContainsKey(target - nums[i])) {
                answer[0] = i;
                answer[1] = KeyNumberValueIndex[target - nums[i]];
                break;
            }

            if (KeyNumberValueIndex.ContainsKey(nums[i])) {
                continue;
            }

            KeyNumberValueIndex.Add(nums[i], i);
        }

        return answer;
    }
}

The code is faster but it uses more memory.
Ideal complexities
Time: O(n)
Space: O(n)
